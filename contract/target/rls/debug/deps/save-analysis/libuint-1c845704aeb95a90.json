{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.1","compilation":{"directory":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48],"program":"/home/top/.rustup/toolchains/nightly-2018-11-12-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","uint","/home/top/.cargo/registry/src/github.com-1ecc6299db9ec823/uint-0.5.0/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"common\"","-C","metadata=1c845704aeb95a90","-C","extra-filename=-1c845704aeb95a90","--out-dir","/home/top/Workstation/LocalDriveB/Test/Rust/Rust-Wasm-contract (Kovan)/Rust-kovan-parity-/contract/target/rls/debug/deps","-L","dependency=/home/top/Workstation/LocalDriveB/Test/Rust/Rust-Wasm-contract (Kovan)/Rust-kovan-parity-/contract/target/rls/debug/deps","--extern","byteorder=/home/top/Workstation/LocalDriveB/Test/Rust/Rust-Wasm-contract (Kovan)/Rust-kovan-parity-/contract/target/rls/debug/deps/libbyteorder-3a2244a33d7d0b9a.rmeta","--extern","crunchy=/home/top/Workstation/LocalDriveB/Test/Rust/Rust-Wasm-contract (Kovan)/Rust-kovan-parity-/contract/target/rls/debug/deps/libcrunchy-995e8316a3da1188.rmeta","--extern","rustc_hex=/home/top/Workstation/LocalDriveB/Test/Rust/Rust-Wasm-contract (Kovan)/Rust-kovan-parity-/contract/target/rls/debug/deps/librustc_hex-3aa72a3128fe3c0e.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/top/.rustup/toolchains/nightly-2018-11-12-x86_64-unknown-linux-gnu"],"output":[47,104,111,109,101,47,116,111,112,47,87,111,114,107,115,116,97,116,105,111,110,47,76,111,99,97,108,68,114,105,118,101,66,47,84,101,115,116,47,82,117,115,116,47,82,117,115,116,45,87,97,115,109,45,99,111,110,116,114,97,99,116,32,40,75,111,118,97,110,41,47,82,117,115,116,45,107,111,118,97,110,45,112,97,114,105,116,121,45,47,99,111,110,116,114,97,99,116,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,100,101,112,115,47,108,105,98,117,105,110,116,45,49,99,56,52,53,55,48,52,97,101,98,57,53,97,57,48,46,114,109,101,116,97]},"prelude":{"crate_id":{"name":"uint","disambiguator":[3445604084839590508,3636121229608751463]},"crate_root":"/home/top/.cargo/registry/src/github.com-1ecc6299db9ec823/uint-0.5.0/src","external_crates":[{"file_name":"/home/top/.cargo/registry/src/github.com-1ecc6299db9ec823/uint-0.5.0/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[2701642863609665171,16477986200351485962]}},{"file_name":"/home/top/.cargo/registry/src/github.com-1ecc6299db9ec823/uint-0.5.0/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[6208417141670606667,11392312703851895547]}},{"file_name":"/home/top/.cargo/registry/src/github.com-1ecc6299db9ec823/uint-0.5.0/src/lib.rs","num":3,"id":{"name":"byteorder","disambiguator":[3664589223571911455,8719310840113455594]}},{"file_name":"/home/top/.cargo/registry/src/github.com-1ecc6299db9ec823/uint-0.5.0/src/lib.rs","num":4,"id":{"name":"rustc_hex","disambiguator":[873269692322234051,8352073462588367956]}},{"file_name":"/home/top/.cargo/registry/src/github.com-1ecc6299db9ec823/uint-0.5.0/src/lib.rs","num":5,"id":{"name":"crunchy","disambiguator":[8448091636391626285,14548877655214402839]}}],"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":347,"byte_end":1327,"line_start":9,"line_end":56,"column_start":1,"column_end":30}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":919,"byte_end":920,"line_start":37,"line_end":37,"column_start":15,"column_end":16},"alias_span":null,"name":"*","value":"FromDecStrErr, split_u128, split, mul_u32","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":362},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1315,"byte_end":1319,"line_start":56,"line_end":56,"column_start":18,"column_end":22},"alias_span":null,"name":"U256","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1030},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1321,"byte_end":1325,"line_start":56,"line_end":56,"column_start":24,"column_end":28},"alias_span":null,"name":"U512","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":347,"byte_end":1327,"line_start":9,"line_end":56,"column_start":1,"column_end":30},"name":"","qualname":"::","value":"/home/top/.cargo/registry/src/github.com-1ecc6299db9ec823/uint-0.5.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":58},{"krate":0,"index":60},{"krate":0,"index":66}],"decl_id":null,"docs":" Efficient large, fixed-size big integers and hashes.\n","sig":null,"attributes":[{"value":"no_std","span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":439,"byte_end":445,"line_start":11,"line_end":11,"column_start":35,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":19},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":2664,"byte_end":2680,"line_start":36,"line_end":36,"column_start":2,"column_end":18},"name":"InvalidCharacter","qualname":"::uint::FromDecStrErr::InvalidCharacter","value":"FromDecStrErr::InvalidCharacter","parent":{"krate":0,"index":72},"children":[],"decl_id":null,"docs":" Char not from range 0-9\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":21},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":2717,"byte_end":2730,"line_start":38,"line_end":38,"column_start":2,"column_end":15},"name":"InvalidLength","qualname":"::uint::FromDecStrErr::InvalidLength","value":"FromDecStrErr::InvalidLength","parent":{"krate":0,"index":72},"children":[],"decl_id":null,"docs":" Value does not fit into type\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":72},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":2618,"byte_end":2631,"line_start":34,"line_end":34,"column_start":10,"column_end":23},"name":"FromDecStrErr","qualname":"::uint::FromDecStrErr","value":"FromDecStrErr::{InvalidCharacter, InvalidLength}","parent":null,"children":[{"krate":0,"index":19},{"krate":0,"index":21}],"decl_id":null,"docs":" Conversion from decimal string error\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":44},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":8929,"byte_end":8936,"line_start":324,"line_end":324,"column_start":8,"column_end":15},"name":"mul_u32","qualname":"::uint::mul_u32","value":"fn (a: (u64, u64), b: u64, carry: u64) -> (u64, u64)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":8889,"byte_end":8906,"line_start":322,"line_end":322,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":46},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":9273,"byte_end":9278,"line_start":337,"line_end":337,"column_start":8,"column_end":13},"name":"split","qualname":"::uint::split","value":"fn (a: u64) -> (u64, u64)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":9233,"byte_end":9250,"line_start":335,"line_end":335,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":48},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":9374,"byte_end":9384,"line_start":343,"line_end":343,"column_start":8,"column_end":18},"name":"split_u128","qualname":"::uint::split_u128","value":"fn (a: u128) -> (u64, u64)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":9334,"byte_end":9351,"line_start":341,"line_end":341,"column_start":1,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":362},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":980,"byte_end":984,"line_start":41,"line_end":41,"column_start":18,"column_end":22},"name":"U256","qualname":"::common::U256","value":"","parent":null,"children":[],"decl_id":null,"docs":" Little-endian large integer type\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":9583,"byte_end":9593,"line_start":351,"line_end":351,"column_start":3,"column_end":13}},{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":9642,"byte_end":9680,"line_start":353,"line_end":353,"column_start":3,"column_end":41}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":9642,"byte_end":9680,"line_start":353,"line_end":353,"column_start":3,"column_end":41}}]},{"kind":"Const","id":{"krate":0,"index":92},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":9909,"byte_end":9912,"line_start":370,"line_end":370,"column_start":14,"column_end":17},"name":"MAX","qualname":"::common::U256::MAX","value":"U256","parent":{"krate":0,"index":90},"children":[],"decl_id":null,"docs":" Maximum value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":10008,"byte_end":10020,"line_start":373,"line_end":373,"column_start":11,"column_end":23},"name":"from_dec_str","qualname":"<U256>::from_dec_str","value":"fn (value: &str) -> Result<Self, ::FromDecStrErr>","parent":null,"children":[],"decl_id":null,"docs":" Convert from a decimal string.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":10629,"byte_end":10636,"line_start":395,"line_end":395,"column_start":11,"column_end":18},"name":"low_u32","qualname":"<U256>::low_u32","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Conversion to u32\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":10609,"byte_end":10618,"line_start":394,"line_end":394,"column_start":4,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":10754,"byte_end":10761,"line_start":402,"line_end":402,"column_start":11,"column_end":18},"name":"low_u64","qualname":"<U256>::low_u64","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Low word (u64)\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":10734,"byte_end":10743,"line_start":401,"line_end":401,"column_start":4,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":10977,"byte_end":10983,"line_start":413,"line_end":413,"column_start":11,"column_end":17},"name":"as_u32","qualname":"<U256>::as_u32","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Conversion to u32 with overflow checking","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":10957,"byte_end":10966,"line_start":412,"line_end":412,"column_start":4,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":11328,"byte_end":11334,"line_start":427,"line_end":427,"column_start":11,"column_end":17},"name":"as_u64","qualname":"<U256>::as_u64","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Conversion to u64 with overflow checking","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":11308,"byte_end":11317,"line_start":426,"line_end":426,"column_start":4,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":11679,"byte_end":11687,"line_start":443,"line_end":443,"column_start":11,"column_end":19},"name":"as_usize","qualname":"<U256>::as_usize","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Conversion to usize with overflow checking","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":11659,"byte_end":11668,"line_start":442,"line_end":442,"column_start":4,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":12029,"byte_end":12036,"line_start":458,"line_end":458,"column_start":11,"column_end":18},"name":"is_zero","qualname":"<U256>::is_zero","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Whether this is zero.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":12009,"byte_end":12018,"line_start":457,"line_end":457,"column_start":4,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":12264,"byte_end":12268,"line_start":466,"line_end":466,"column_start":11,"column_end":15},"name":"bits","qualname":"<U256>::bits","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the least number of bits needed to represent the number\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":12244,"byte_end":12253,"line_start":465,"line_end":465,"column_start":4,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":12669,"byte_end":12672,"line_start":480,"line_end":480,"column_start":11,"column_end":14},"name":"bit","qualname":"<U256>::bit","value":"fn (&self, index: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return if specific bit is set.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":12649,"byte_end":12658,"line_start":479,"line_end":479,"column_start":4,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":12880,"byte_end":12893,"line_start":486,"line_end":486,"column_start":11,"column_end":24},"name":"leading_zeros","qualname":"<U256>::leading_zeros","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of leading zeros in the binary representation of self.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":13200,"byte_end":13214,"line_start":501,"line_end":501,"column_start":11,"column_end":25},"name":"trailing_zeros","qualname":"<U256>::trailing_zeros","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of leading zeros in the binary representation of self.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":13561,"byte_end":13565,"line_start":521,"line_end":521,"column_start":11,"column_end":15},"name":"byte","qualname":"<U256>::byte","value":"fn (&self, index: usize) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Return specific byte.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":13541,"byte_end":13550,"line_start":520,"line_end":520,"column_start":4,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":13754,"byte_end":13767,"line_start":528,"line_end":528,"column_start":11,"column_end":24},"name":"to_big_endian","qualname":"<U256>::to_big_endian","value":"fn (&self, bytes: &mut [u8]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Write to the slice in big-endian format.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":13734,"byte_end":13743,"line_start":527,"line_end":527,"column_start":4,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":14081,"byte_end":14097,"line_start":538,"line_end":538,"column_start":11,"column_end":27},"name":"to_little_endian","qualname":"<U256>::to_little_endian","value":"fn (&self, bytes: &mut [u8]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Write to the slice in little-endian format.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":14061,"byte_end":14070,"line_start":537,"line_end":537,"column_start":4,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":14466,"byte_end":14471,"line_start":553,"line_end":553,"column_start":11,"column_end":16},"name":"exp10","qualname":"<U256>::exp10","value":"fn (n: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create `10**n` as this type.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":14446,"byte_end":14455,"line_start":552,"line_end":552,"column_start":4,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":14652,"byte_end":14656,"line_start":562,"line_end":562,"column_start":11,"column_end":15},"name":"zero","qualname":"<U256>::zero","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Zero (additive identity) of this type.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":14632,"byte_end":14641,"line_start":561,"line_end":561,"column_start":4,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":14770,"byte_end":14773,"line_start":568,"line_end":568,"column_start":11,"column_end":14},"name":"one","qualname":"<U256>::one","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" One (multiplicative identity) of this type.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":14750,"byte_end":14759,"line_start":567,"line_end":567,"column_start":4,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":14898,"byte_end":14907,"line_start":574,"line_end":574,"column_start":11,"column_end":20},"name":"max_value","qualname":"<U256>::max_value","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" The maximum value which can be inhabited by this type.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":14878,"byte_end":14887,"line_start":573,"line_end":573,"column_start":4,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":15238,"byte_end":15241,"line_start":588,"line_end":588,"column_start":11,"column_end":14},"name":"pow","qualname":"<U256>::pow","value":"fn (self, expon: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Fast exponentation by squaring\n https://en.wikipedia.org/wiki/Exponentiation_by_squaring","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":15868,"byte_end":15883,"line_start":614,"line_end":614,"column_start":11,"column_end":26},"name":"overflowing_pow","qualname":"<U256>::overflowing_pow","value":"fn (self, expon: Self) -> (Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Fast exponentation by squaring. Returns result and overflow flag.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":16596,"byte_end":16611,"line_start":641,"line_end":641,"column_start":11,"column_end":26},"name":"overflowing_add","qualname":"<U256>::overflowing_add","value":"fn (self, other: U256) -> (U256, bool)","parent":null,"children":[],"decl_id":null,"docs":" Add with overflow.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":16568,"byte_end":16585,"line_start":640,"line_end":640,"column_start":4,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":16797,"byte_end":16811,"line_start":646,"line_end":646,"column_start":11,"column_end":25},"name":"saturating_add","qualname":"<U256>::saturating_add","value":"fn (self, other: U256) -> U256","parent":null,"children":[],"decl_id":null,"docs":" Addition which saturates at the maximum value (Self::max_value()).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":17031,"byte_end":17042,"line_start":654,"line_end":654,"column_start":11,"column_end":22},"name":"checked_add","qualname":"<U256>::checked_add","value":"fn (self, other: U256) -> Option<U256>","parent":null,"children":[],"decl_id":null,"docs":" Checked addition. Returns `None` if overflow occurred.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":17284,"byte_end":17299,"line_start":663,"line_end":663,"column_start":11,"column_end":26},"name":"overflowing_sub","qualname":"<U256>::overflowing_sub","value":"fn (self, other: U256) -> (U256, bool)","parent":null,"children":[],"decl_id":null,"docs":" Subtraction which underflows and returns a flag if it does.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":17256,"byte_end":17273,"line_start":662,"line_end":662,"column_start":4,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":17455,"byte_end":17469,"line_start":668,"line_end":668,"column_start":11,"column_end":25},"name":"saturating_sub","qualname":"<U256>::saturating_sub","value":"fn (self, other: U256) -> U256","parent":null,"children":[],"decl_id":null,"docs":" Subtraction which saturates at zero.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":17687,"byte_end":17698,"line_start":676,"line_end":676,"column_start":11,"column_end":22},"name":"checked_sub","qualname":"<U256>::checked_sub","value":"fn (self, other: U256) -> Option<U256>","parent":null,"children":[],"decl_id":null,"docs":" Checked subtraction. Returns `None` if overflow occurred.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":17933,"byte_end":17948,"line_start":685,"line_end":685,"column_start":11,"column_end":26},"name":"overflowing_mul","qualname":"<U256>::overflowing_mul","value":"fn (self, other: U256) -> (U256, bool)","parent":null,"children":[],"decl_id":null,"docs":" Multiply with overflow, returning a flag if it does.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":17905,"byte_end":17922,"line_start":684,"line_end":684,"column_start":4,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":18121,"byte_end":18135,"line_start":690,"line_end":690,"column_start":11,"column_end":25},"name":"saturating_mul","qualname":"<U256>::saturating_mul","value":"fn (self, other: U256) -> U256","parent":null,"children":[],"decl_id":null,"docs":" Multiplication which saturates at the maximum value..\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":18361,"byte_end":18372,"line_start":698,"line_end":698,"column_start":11,"column_end":22},"name":"checked_mul","qualname":"<U256>::checked_mul","value":"fn (self, other: U256) -> Option<U256>","parent":null,"children":[],"decl_id":null,"docs":" Checked multiplication. Returns `None` if overflow occurred.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":18583,"byte_end":18594,"line_start":706,"line_end":706,"column_start":11,"column_end":22},"name":"checked_div","qualname":"<U256>::checked_div","value":"fn (self, other: U256) -> Option<U256>","parent":null,"children":[],"decl_id":null,"docs":" Checked division. Returns `None` if `other == 0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":18784,"byte_end":18795,"line_start":715,"line_end":715,"column_start":11,"column_end":22},"name":"checked_rem","qualname":"<U256>::checked_rem","value":"fn (self, other: U256) -> Option<U256>","parent":null,"children":[],"decl_id":null,"docs":" Checked modulus. Returns `None` if `other == 0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":18960,"byte_end":18975,"line_start":724,"line_end":724,"column_start":11,"column_end":26},"name":"overflowing_neg","qualname":"<U256>::overflowing_neg","value":"fn (self) -> (U256, bool)","parent":null,"children":[],"decl_id":null,"docs":" Negation with overflow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":19158,"byte_end":19169,"line_start":733,"line_end":733,"column_start":11,"column_end":22},"name":"checked_neg","qualname":"<U256>::checked_neg","value":"fn (self) -> Option<U256>","parent":null,"children":[],"decl_id":null,"docs":" Checked negation. Returns `None` unless `self == 0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":19778,"byte_end":19793,"line_start":757,"line_end":757,"column_start":11,"column_end":26},"name":"from_big_endian","qualname":"<U256>::from_big_endian","value":"fn (slice: &[u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts from big endian representation bytes in memory.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":20356,"byte_end":20374,"line_start":776,"line_end":776,"column_start":11,"column_end":29},"name":"from_little_endian","qualname":"<U256>::from_little_endian","value":"fn (slice: &[u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts from little endian representation bytes in memory.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1030},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1007,"byte_end":1011,"line_start":42,"line_end":42,"column_start":18,"column_end":22},"name":"U512","qualname":"::common::U512","value":"","parent":null,"children":[],"decl_id":null,"docs":" Little-endian large integer type\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":9583,"byte_end":9593,"line_start":351,"line_end":351,"column_start":3,"column_end":13}},{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":9642,"byte_end":9680,"line_start":353,"line_end":353,"column_start":3,"column_end":41}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":9642,"byte_end":9680,"line_start":353,"line_end":353,"column_start":3,"column_end":41}}]},{"kind":"Const","id":{"krate":0,"index":760},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":9909,"byte_end":9912,"line_start":370,"line_end":370,"column_start":14,"column_end":17},"name":"MAX","qualname":"::common::U512::MAX","value":"U512","parent":{"krate":0,"index":758},"children":[],"decl_id":null,"docs":" Maximum value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":762},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":10008,"byte_end":10020,"line_start":373,"line_end":373,"column_start":11,"column_end":23},"name":"from_dec_str","qualname":"<U512>::from_dec_str","value":"fn (value: &str) -> Result<Self, ::FromDecStrErr>","parent":null,"children":[],"decl_id":null,"docs":" Convert from a decimal string.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":764},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":10629,"byte_end":10636,"line_start":395,"line_end":395,"column_start":11,"column_end":18},"name":"low_u32","qualname":"<U512>::low_u32","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Conversion to u32\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":10609,"byte_end":10618,"line_start":394,"line_end":394,"column_start":4,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":766},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":10754,"byte_end":10761,"line_start":402,"line_end":402,"column_start":11,"column_end":18},"name":"low_u64","qualname":"<U512>::low_u64","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Low word (u64)\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":10734,"byte_end":10743,"line_start":401,"line_end":401,"column_start":4,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":768},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":10977,"byte_end":10983,"line_start":413,"line_end":413,"column_start":11,"column_end":17},"name":"as_u32","qualname":"<U512>::as_u32","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Conversion to u32 with overflow checking","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":10957,"byte_end":10966,"line_start":412,"line_end":412,"column_start":4,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":770},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":11328,"byte_end":11334,"line_start":427,"line_end":427,"column_start":11,"column_end":17},"name":"as_u64","qualname":"<U512>::as_u64","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Conversion to u64 with overflow checking","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":11308,"byte_end":11317,"line_start":426,"line_end":426,"column_start":4,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":772},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":11679,"byte_end":11687,"line_start":443,"line_end":443,"column_start":11,"column_end":19},"name":"as_usize","qualname":"<U512>::as_usize","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Conversion to usize with overflow checking","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":11659,"byte_end":11668,"line_start":442,"line_end":442,"column_start":4,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":774},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":12029,"byte_end":12036,"line_start":458,"line_end":458,"column_start":11,"column_end":18},"name":"is_zero","qualname":"<U512>::is_zero","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Whether this is zero.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":12009,"byte_end":12018,"line_start":457,"line_end":457,"column_start":4,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":776},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":12264,"byte_end":12268,"line_start":466,"line_end":466,"column_start":11,"column_end":15},"name":"bits","qualname":"<U512>::bits","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the least number of bits needed to represent the number\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":12244,"byte_end":12253,"line_start":465,"line_end":465,"column_start":4,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":778},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":12669,"byte_end":12672,"line_start":480,"line_end":480,"column_start":11,"column_end":14},"name":"bit","qualname":"<U512>::bit","value":"fn (&self, index: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return if specific bit is set.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":12649,"byte_end":12658,"line_start":479,"line_end":479,"column_start":4,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":780},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":12880,"byte_end":12893,"line_start":486,"line_end":486,"column_start":11,"column_end":24},"name":"leading_zeros","qualname":"<U512>::leading_zeros","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of leading zeros in the binary representation of self.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":782},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":13200,"byte_end":13214,"line_start":501,"line_end":501,"column_start":11,"column_end":25},"name":"trailing_zeros","qualname":"<U512>::trailing_zeros","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of leading zeros in the binary representation of self.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":784},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":13561,"byte_end":13565,"line_start":521,"line_end":521,"column_start":11,"column_end":15},"name":"byte","qualname":"<U512>::byte","value":"fn (&self, index: usize) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Return specific byte.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":13541,"byte_end":13550,"line_start":520,"line_end":520,"column_start":4,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":786},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":13754,"byte_end":13767,"line_start":528,"line_end":528,"column_start":11,"column_end":24},"name":"to_big_endian","qualname":"<U512>::to_big_endian","value":"fn (&self, bytes: &mut [u8]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Write to the slice in big-endian format.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":13734,"byte_end":13743,"line_start":527,"line_end":527,"column_start":4,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":794},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":14081,"byte_end":14097,"line_start":538,"line_end":538,"column_start":11,"column_end":27},"name":"to_little_endian","qualname":"<U512>::to_little_endian","value":"fn (&self, bytes: &mut [u8]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Write to the slice in little-endian format.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":14061,"byte_end":14070,"line_start":537,"line_end":537,"column_start":4,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":802},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":14466,"byte_end":14471,"line_start":553,"line_end":553,"column_start":11,"column_end":16},"name":"exp10","qualname":"<U512>::exp10","value":"fn (n: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create `10**n` as this type.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":14446,"byte_end":14455,"line_start":552,"line_end":552,"column_start":4,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":804},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":14652,"byte_end":14656,"line_start":562,"line_end":562,"column_start":11,"column_end":15},"name":"zero","qualname":"<U512>::zero","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Zero (additive identity) of this type.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":14632,"byte_end":14641,"line_start":561,"line_end":561,"column_start":4,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":806},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":14770,"byte_end":14773,"line_start":568,"line_end":568,"column_start":11,"column_end":14},"name":"one","qualname":"<U512>::one","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" One (multiplicative identity) of this type.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":14750,"byte_end":14759,"line_start":567,"line_end":567,"column_start":4,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":808},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":14898,"byte_end":14907,"line_start":574,"line_end":574,"column_start":11,"column_end":20},"name":"max_value","qualname":"<U512>::max_value","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" The maximum value which can be inhabited by this type.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":14878,"byte_end":14887,"line_start":573,"line_end":573,"column_start":4,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":810},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":15238,"byte_end":15241,"line_start":588,"line_end":588,"column_start":11,"column_end":14},"name":"pow","qualname":"<U512>::pow","value":"fn (self, expon: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Fast exponentation by squaring\n https://en.wikipedia.org/wiki/Exponentiation_by_squaring","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":812},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":15868,"byte_end":15883,"line_start":614,"line_end":614,"column_start":11,"column_end":26},"name":"overflowing_pow","qualname":"<U512>::overflowing_pow","value":"fn (self, expon: Self) -> (Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Fast exponentation by squaring. Returns result and overflow flag.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":814},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":16596,"byte_end":16611,"line_start":641,"line_end":641,"column_start":11,"column_end":26},"name":"overflowing_add","qualname":"<U512>::overflowing_add","value":"fn (self, other: U512) -> (U512, bool)","parent":null,"children":[],"decl_id":null,"docs":" Add with overflow.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":16568,"byte_end":16585,"line_start":640,"line_end":640,"column_start":4,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":816},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":16797,"byte_end":16811,"line_start":646,"line_end":646,"column_start":11,"column_end":25},"name":"saturating_add","qualname":"<U512>::saturating_add","value":"fn (self, other: U512) -> U512","parent":null,"children":[],"decl_id":null,"docs":" Addition which saturates at the maximum value (Self::max_value()).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":818},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":17031,"byte_end":17042,"line_start":654,"line_end":654,"column_start":11,"column_end":22},"name":"checked_add","qualname":"<U512>::checked_add","value":"fn (self, other: U512) -> Option<U512>","parent":null,"children":[],"decl_id":null,"docs":" Checked addition. Returns `None` if overflow occurred.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":820},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":17284,"byte_end":17299,"line_start":663,"line_end":663,"column_start":11,"column_end":26},"name":"overflowing_sub","qualname":"<U512>::overflowing_sub","value":"fn (self, other: U512) -> (U512, bool)","parent":null,"children":[],"decl_id":null,"docs":" Subtraction which underflows and returns a flag if it does.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":17256,"byte_end":17273,"line_start":662,"line_end":662,"column_start":4,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":822},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":17455,"byte_end":17469,"line_start":668,"line_end":668,"column_start":11,"column_end":25},"name":"saturating_sub","qualname":"<U512>::saturating_sub","value":"fn (self, other: U512) -> U512","parent":null,"children":[],"decl_id":null,"docs":" Subtraction which saturates at zero.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":824},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":17687,"byte_end":17698,"line_start":676,"line_end":676,"column_start":11,"column_end":22},"name":"checked_sub","qualname":"<U512>::checked_sub","value":"fn (self, other: U512) -> Option<U512>","parent":null,"children":[],"decl_id":null,"docs":" Checked subtraction. Returns `None` if overflow occurred.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":826},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":17933,"byte_end":17948,"line_start":685,"line_end":685,"column_start":11,"column_end":26},"name":"overflowing_mul","qualname":"<U512>::overflowing_mul","value":"fn (self, other: U512) -> (U512, bool)","parent":null,"children":[],"decl_id":null,"docs":" Multiply with overflow, returning a flag if it does.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":17905,"byte_end":17922,"line_start":684,"line_end":684,"column_start":4,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":828},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":18121,"byte_end":18135,"line_start":690,"line_end":690,"column_start":11,"column_end":25},"name":"saturating_mul","qualname":"<U512>::saturating_mul","value":"fn (self, other: U512) -> U512","parent":null,"children":[],"decl_id":null,"docs":" Multiplication which saturates at the maximum value..\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":830},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":18361,"byte_end":18372,"line_start":698,"line_end":698,"column_start":11,"column_end":22},"name":"checked_mul","qualname":"<U512>::checked_mul","value":"fn (self, other: U512) -> Option<U512>","parent":null,"children":[],"decl_id":null,"docs":" Checked multiplication. Returns `None` if overflow occurred.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":832},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":18583,"byte_end":18594,"line_start":706,"line_end":706,"column_start":11,"column_end":22},"name":"checked_div","qualname":"<U512>::checked_div","value":"fn (self, other: U512) -> Option<U512>","parent":null,"children":[],"decl_id":null,"docs":" Checked division. Returns `None` if `other == 0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":834},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":18784,"byte_end":18795,"line_start":715,"line_end":715,"column_start":11,"column_end":22},"name":"checked_rem","qualname":"<U512>::checked_rem","value":"fn (self, other: U512) -> Option<U512>","parent":null,"children":[],"decl_id":null,"docs":" Checked modulus. Returns `None` if `other == 0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":836},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":18960,"byte_end":18975,"line_start":724,"line_end":724,"column_start":11,"column_end":26},"name":"overflowing_neg","qualname":"<U512>::overflowing_neg","value":"fn (self) -> (U512, bool)","parent":null,"children":[],"decl_id":null,"docs":" Negation with overflow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":838},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":19158,"byte_end":19169,"line_start":733,"line_end":733,"column_start":11,"column_end":22},"name":"checked_neg","qualname":"<U512>::checked_neg","value":"fn (self) -> Option<U512>","parent":null,"children":[],"decl_id":null,"docs":" Checked negation. Returns `None` unless `self == 0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":842},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":19778,"byte_end":19793,"line_start":757,"line_end":757,"column_start":11,"column_end":26},"name":"from_big_endian","qualname":"<U512>::from_big_endian","value":"fn (slice: &[u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts from big endian representation bytes in memory.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":844},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,117,105,110,116,46,114,115],"byte_start":20356,"byte_end":20374,"line_start":776,"line_end":776,"column_start":11,"column_end":29},"name":"from_little_endian","qualname":"<U512>::from_little_endian","value":"fn (slice: &[u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts from little endian representation bytes in memory.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1173,"byte_end":1181,"line_start":49,"line_end":49,"column_start":10,"column_end":18},"name":"full_mul","qualname":"<U256>::full_mul","value":"fn (self, other: U256) -> U512","parent":null,"children":[],"decl_id":null,"docs":" Multiplies two 256-bit integers to produce full 512-bit integer\n No overflow possible\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1146,"byte_end":1163,"line_start":48,"line_end":48,"column_start":3,"column_end":20}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1040,"byte_end":1044,"line_start":45,"line_end":45,"column_start":7,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":64}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,104,111,109,101,47,116,111,112,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,105,110,116,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1040,"byte_end":1044,"line_start":45,"line_end":45,"column_start":7,"column_end":11},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":362},"to":{"krate":4294967295,"index":4294967295}}]}